{"ast":null,"code":"var _jsxFileName = \"/home/fv/js/javascript-practice/react-jokes-classes/src/JokeListCLS.js\";\n// import React, { useState, useEffect } from \"react\";\nimport React from 'react';\nimport axios from \"axios\";\nimport JokeCLS from \"./JokeCLS\";\nimport \"./JokeList.css\";\n\nclass JokeListCLS extends React.Component {\n  // ({ numJokesToGet = 10 }) {\n  // const [jokes, setJokes] = useState([]);\n  constructor(props) {\n    super(props);\n    this.state = {\n      jokes: [],\n      numJokesToGet: 10\n    };\n  }\n\n  componentDidMount() {\n    async function getJokes() {\n      let j = [...this.props.jokes];\n      let seenJokes = new Set();\n\n      try {\n        while (j.length < this.numJokesToGet) {\n          let res = await axios.get(\"https://icanhazdadjoke.com\", {\n            headers: {\n              Accept: \"application/json\"\n            }\n          });\n          let {\n            status,\n            ...jokeObj\n          } = res.data;\n\n          if (!seenJokes.has(jokeObj.id)) {\n            seenJokes.add(jokeObj.id);\n            j.push({ ...jokeObj,\n              votes: 0\n            });\n          } else {\n            console.error(\"duplicate found!\");\n          }\n        }\n\n        this.setJokes(j);\n      } catch (e) {\n        console.log(e);\n      }\n    }\n\n    if (this.jokes.length === 0) getJokes();\n  }\n  /* empty joke list and then call getJokes */\n\n\n  generateNewJokes() {\n    this.setJokes([]);\n  }\n  /* change vote for this id by delta (+1 or -1) */\n\n\n  vote(id, delta) {\n    this.setJokes(allJokes => allJokes.map(j => j.id === id ? { ...j,\n      votes: j.votes + delta\n    } : j));\n  }\n  /* render: either loading spinner or list of sorted jokes. */\n\n\n  render() {\n    if (this.jokes.length) {\n      let sortedJokes = [...this.jokes].sort((a, b) => b.votes - a.votes);\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"JokeList\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"button\", {\n        className: \"JokeList-getmore\",\n        onClick: this.generateNewJokes,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }\n      }, \"Get New Jokes\"), sortedJokes.map(j => /*#__PURE__*/React.createElement(JokeCLS, {\n        text: j.joke,\n        key: j.id,\n        id: j.id,\n        votes: j.votes,\n        vote: this.vote,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 13\n        }\n      })));\n    }\n\n    return null;\n  } // return null;\n\n\n}\n\nexport default JokeListCLS;","map":{"version":3,"sources":["/home/fv/js/javascript-practice/react-jokes-classes/src/JokeListCLS.js"],"names":["React","axios","JokeCLS","JokeListCLS","Component","constructor","props","state","jokes","numJokesToGet","componentDidMount","getJokes","j","seenJokes","Set","length","res","get","headers","Accept","status","jokeObj","data","has","id","add","push","votes","console","error","setJokes","e","log","generateNewJokes","vote","delta","allJokes","map","render","sortedJokes","sort","a","b","joke"],"mappings":"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","sourcesContent":["// import React, { useState, useEffect } from \"react\";\nimport React from 'react';\nimport axios from \"axios\";\nimport JokeCLS from \"./JokeCLS\";\nimport \"./JokeList.css\";\n\nclass JokeListCLS extends React.Component {\n// ({ numJokesToGet = 10 }) {\n\n  // const [jokes, setJokes] = useState([]);\n  constructor(props) {\n    super(props);\n    this.state = {\n      jokes: [],\n      numJokesToGet: 10\n    }\n  }\n  componentDidMount() {\n    async function getJokes() {\n      let j = [...this.props.jokes];\n      let seenJokes = new Set();\n      try {\n        while (j.length < this.numJokesToGet) {\n          let res = await axios.get(\"https://icanhazdadjoke.com\", {\n            headers: { Accept: \"application/json\" }\n          });\n          let { status, ...jokeObj } = res.data;\n  \n          if (!seenJokes.has(jokeObj.id)) {\n            seenJokes.add(jokeObj.id);\n            j.push({ ...jokeObj, votes: 0 });\n          } else {\n            console.error(\"duplicate found!\");\n          }\n        }\n        this.setJokes(j);\n      } catch (e) {\n        console.log(e);\n      }\n    }\n\n    if (this.jokes.length === 0) getJokes();\n  }\n\n  /* empty joke list and then call getJokes */\n\n  generateNewJokes() {\n    this.setJokes([]);\n  }\n\n  /* change vote for this id by delta (+1 or -1) */\n\n  vote(id, delta) {\n    this.setJokes(allJokes =>\n      allJokes.map(j => (j.id === id ? { ...j, votes: j.votes + delta } : j))\n    );\n  }\n\n  /* render: either loading spinner or list of sorted jokes. */\n  render() {\n    if (this.jokes.length) {\n      let sortedJokes = [...this.jokes].sort((a, b) => b.votes - a.votes);\n    \n      return (\n        <div className=\"JokeList\">\n          <button className=\"JokeList-getmore\" onClick={this.generateNewJokes}>\n            Get New Jokes\n          </button>\n    \n          {sortedJokes.map(j => (\n            <JokeCLS text={j.joke} key={j.id} id={j.id} votes={j.votes} vote={this.vote} />\n          ))}\n        </div>\n      );\n    }\n    return null;\n  }\n  \n\n  // return null;\n\n}\n\nexport default JokeListCLS;\n"]},"metadata":{},"sourceType":"module"}