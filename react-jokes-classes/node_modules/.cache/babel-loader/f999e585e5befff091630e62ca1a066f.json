{"ast":null,"code":"var _jsxFileName = \"/home/fv/js/javascript-practice/react-jokes-classes/src/JokeListCLS.js\";\n// import React, { useState, useEffect } from \"react\";\nimport React from 'react';\nimport axios from 'axios';\nimport JokeCLS from './JokeCLS';\nimport './JokeList.css';\nimport { v4 as uuid } from 'uuid';\n\nclass JokeListCLS extends React.Component {\n  // ({ numJokesToGet = 10 }) {\n  // const [jokes, setJokes] = useState([]);\n  constructor(props) {\n    super(props);\n    this.state = {\n      jokes: [],\n      votes: 0,\n      numJokesToGet: 10\n    }; // this.vote = this.vote.bind(this);\n    // this.vote = this.vote.bind(this);\n    // this.vote = this.vote.bind(this);\n\n    this.getJokes = this.getJokes.bind(this);\n    this.generateNewJokes = this.generateNewJokes.bind(this);\n    this.vote = this.vote.bind(this);\n  }\n\n  componentDidMount() {\n    if (this.state.jokes.length === 0) this.getJokes();\n  }\n\n  async getJokes() {\n    console.log(\"this.state.jokes\");\n    let j = [...this.state.jokes];\n    let seenJokes = new Set();\n\n    try {\n      while (j.length < this.state.numJokesToGet) {\n        let res = await axios.get(\"https://icanhazdadjoke.com\", {\n          headers: {\n            Accept: \"application/json\"\n          }\n        });\n        let {\n          status,\n          ...jokeObj\n        } = res.data;\n\n        if (!seenJokes.has(jokeObj.id)) {\n          seenJokes.add(jokeObj.id);\n          j.push({ ...jokeObj,\n            votes: 0\n          });\n        } else {\n          console.error(\"duplicate found!\");\n        }\n      }\n\n      this.setState((state, props) => ({\n        jokes: [...this.state.jokes, j]\n      })); // this.setState({jokes: [...this.state.jokes, j]});\n    } catch (e) {\n      console.log(e);\n    }\n  }\n  /* empty joke list and then call getJokes */\n\n\n  generateNewJokes() {\n    this.setState((state, props) => ({\n      jokes: []\n    }));\n    this.getJokes(); // this.setState({jokes: []});\n    // this.setJokes([]);\n  }\n  /* change vote for this id by delta (+1 or -1) */\n\n\n  vote(id, delta) {\n    console.log('vote');\n    this.setState((state, props) => ({\n      jokes: state.jokes.map(j => j.id === id ? { ...j,\n        votes: j.votes + delta\n      } : j)\n    })); // this.setState({jokes: this.jokes.map(j => j.id === id ? { ...j, votes: j.votes + delta } : j)});\n  }\n  /* render: either loading spinner or list of sorted jokes. */\n\n\n  render() {\n    if (this.state.jokes.length) {\n      let sortedJokes = [...this.state.jokes].sort((a, b) => b.votes - a.votes);\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"JokeList\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"button\", {\n        className: \"JokeList-getmore\",\n        onClick: this.generateNewJokes,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 11\n        }\n      }, \"Get New Jokes\"), console.log('sortedJokes ', sortedJokes[0]), sortedJokes[0].map(j => /*#__PURE__*/React.createElement(JokeCLS, {\n        text: j.joke,\n        key: uuid(),\n        id: j.id,\n        votes: j.votes,\n        vote: this.vote,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 13\n        }\n      })));\n    }\n\n    return null;\n  }\n\n}\n\nexport default JokeListCLS;","map":{"version":3,"sources":["/home/fv/js/javascript-practice/react-jokes-classes/src/JokeListCLS.js"],"names":["React","axios","JokeCLS","v4","uuid","JokeListCLS","Component","constructor","props","state","jokes","votes","numJokesToGet","getJokes","bind","generateNewJokes","vote","componentDidMount","length","console","log","j","seenJokes","Set","res","get","headers","Accept","status","jokeObj","data","has","id","add","push","error","setState","e","delta","map","render","sortedJokes","sort","a","b","joke"],"mappings":"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","sourcesContent":["// import React, { useState, useEffect } from \"react\";\nimport React from 'react';\nimport axios from 'axios';\nimport JokeCLS from './JokeCLS';\nimport './JokeList.css';\nimport {v4 as uuid} from 'uuid';\nclass JokeListCLS extends React.Component {\n// ({ numJokesToGet = 10 }) {\n\n  // const [jokes, setJokes] = useState([]);\n  constructor(props) {\n    super(props);\n    this.state = {\n      jokes: [],\n      votes: 0,\n      numJokesToGet: 10\n    }\n\n    // this.vote = this.vote.bind(this);\n    // this.vote = this.vote.bind(this);\n    // this.vote = this.vote.bind(this);\n    this.getJokes = this.getJokes.bind(this);\n    this.generateNewJokes = this.generateNewJokes.bind(this);\n    this.vote = this.vote.bind(this);\n  }\n  componentDidMount() {\n    \n\n    if (this.state.jokes.length === 0) this.getJokes();\n  }\n  async getJokes() {\n    console.log(\"this.state.jokes\",)\n    let j = [...this.state.jokes];\n    let seenJokes = new Set();\n    try {\n      while (j.length < this.state.numJokesToGet) {\n        let res = await axios.get(\"https://icanhazdadjoke.com\", {\n          headers: { Accept: \"application/json\" }\n        });\n        let { status, ...jokeObj } = res.data;\n\n        if (!seenJokes.has(jokeObj.id)) {\n          seenJokes.add(jokeObj.id);\n          j.push({ ...jokeObj, votes: 0 });\n        } else {\n          console.error(\"duplicate found!\");\n        }\n      }\n      this.setState((state, props) => ({\n        jokes: [...this.state.jokes, j]\n      }));\n      // this.setState({jokes: [...this.state.jokes, j]});\n    } catch (e) {\n      console.log(e);\n    }\n  }\n  /* empty joke list and then call getJokes */\n\n  generateNewJokes() {\n    this.setState((state, props) => ({\n      jokes: []\n    }));\n    this.getJokes();\n    // this.setState({jokes: []});\n    // this.setJokes([]);\n  }\n\n  /* change vote for this id by delta (+1 or -1) */\n\n  vote(id, delta) {\n    console.log('vote')\n    this.setState((state, props) => ({\n      jokes: state.jokes.map(j => j.id === id ? { ...j, votes: j.votes + delta } : j)\n    }));\n    // this.setState({jokes: this.jokes.map(j => j.id === id ? { ...j, votes: j.votes + delta } : j)});\n  }\n\n  /* render: either loading spinner or list of sorted jokes. */\n  render() {\n    if (this.state.jokes.length) {\n      let sortedJokes = [...this.state.jokes].sort((a, b) => b.votes - a.votes);\n    \n      return (\n        <div className=\"JokeList\">\n          <button className=\"JokeList-getmore\" onClick={this.generateNewJokes}>\n            Get New Jokes\n          </button>\n          {console.log('sortedJokes ',sortedJokes[0])}\n          {sortedJokes[0].map(j => (            \n            <JokeCLS text={j.joke} key={uuid()} id={j.id} votes={j.votes} vote={this.vote} />\n          ))}\n        </div>\n      );\n    }\n    return null;\n  }\n  \n\n}\n\nexport default JokeListCLS;\n"]},"metadata":{},"sourceType":"module"}