{"ast":null,"code":"var _jsxFileName = \"/home/fv/js/javascript-practice/react-jokes-classes/src/JokeListCLS.js\";\nimport React from 'react';\nimport axios from 'axios';\nimport JokeCLS from './JokeCLS';\nimport './JokeList.css';\nimport { v4 as uuid } from 'uuid';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nclass JokeListCLS extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      jokes: [],\n      loading: false\n    };\n    this.numJokesToGet = 10;\n    this.getJokes = this.getJokes.bind(this);\n    this.generateNewJokes = this.generateNewJokes.bind(this);\n    this.vote = this.vote.bind(this);\n  }\n\n  componentDidMount() {\n    if (this.state.jokes.length === 0) this.getJokes();\n  }\n\n  componentDidUpdate(previousProps, previousState) {\n    if (previousState.loading !== this.state.loading) {\n      console.log('componentDidUpdate', this.state.loading);\n      this.setState({\n        jokes: this.state.jokes.slice()\n      });\n    }\n  }\n\n  async getJokes() {\n    let j = [];\n    let seenJokes = new Set();\n\n    try {\n      this.setState({\n        loading: true\n      });\n\n      while (j.length < this.numJokesToGet) {\n        let res = await axios.get(\"https://icanhazdadjoke.com\", {\n          headers: {\n            Accept: \"application/json\"\n          }\n        });\n        let {\n          status,\n          ...jokeObj\n        } = res.data;\n        console.log(j.length, status, jokeObj);\n\n        if (!seenJokes.has(jokeObj.id)) {\n          seenJokes.add(jokeObj.id);\n          j.push({ ...jokeObj,\n            votes: 0\n          });\n        } else {\n          console.error(\"duplicate found!\");\n        }\n      }\n\n      this.setState((state, props) => ({\n        jokes: [...this.state.jokes, j]\n      }));\n    } catch (e) {\n      console.log(e);\n    }\n  }\n  /* empty joke list and then call getJokes */\n\n\n  async generateNewJokes() {\n    this.setState({\n      jokes: []\n    });\n    await this.getJokes();\n    this.setState({\n      loading: false\n    });\n    console.log('generateNewJokes loading', this.state.loading);\n  }\n  /* change vote for this id by delta (+1 or -1) */\n\n\n  vote(id, delta) {\n    let {\n      jokes\n    } = this.state;\n    this.setState({\n      jokes: [jokes[0].map(j => j.id === id ? { ...j,\n        votes: j.votes + delta\n      } : j)]\n    });\n  }\n  /* render: either loading spinner or list of sorted jokes. */\n\n\n  render() {\n    if (!this.state.loading && this.state.jokes.length) {\n      let sortedJokes = [...this.state.jokes[0]].sort((a, b) => b.votes - a.votes);\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"JokeList\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"button\", {\n        className: \"JokeList-getmore\",\n        onClick: this.generateNewJokes(),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 11\n        }\n      }, \"Get New Jokes\"), sortedJokes.map(j => /*#__PURE__*/React.createElement(JokeCLS, {\n        text: j.joke,\n        key: uuid(),\n        id: j.id,\n        votes: j.votes,\n        vote: this.vote,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 13\n        }\n      })));\n    } else {\n      return /*#__PURE__*/React.createElement(CircularProgress, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 14\n        }\n      });\n    }\n  }\n\n}\n\nexport default JokeListCLS;","map":{"version":3,"sources":["/home/fv/js/javascript-practice/react-jokes-classes/src/JokeListCLS.js"],"names":["React","axios","JokeCLS","v4","uuid","CircularProgress","JokeListCLS","Component","constructor","props","state","jokes","loading","numJokesToGet","getJokes","bind","generateNewJokes","vote","componentDidMount","length","componentDidUpdate","previousProps","previousState","console","log","setState","slice","j","seenJokes","Set","res","get","headers","Accept","status","jokeObj","data","has","id","add","push","votes","error","e","delta","map","render","sortedJokes","sort","a","b","joke"],"mappings":"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","sourcesContent":["import React from 'react';\nimport axios from 'axios';\nimport JokeCLS from './JokeCLS';\nimport './JokeList.css';\nimport {v4 as uuid} from 'uuid';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nclass JokeListCLS extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      jokes: [],\n      loading: false\n    }\n    this.numJokesToGet = 10;\n    this.getJokes = this.getJokes.bind(this);\n    this.generateNewJokes = this.generateNewJokes.bind(this);\n    this.vote = this.vote.bind(this);\n  }\n  componentDidMount() {\n    if (this.state.jokes.length === 0) this.getJokes();\n  }\n  componentDidUpdate(previousProps, previousState) {\n    if(previousState.loading !== this.state.loading) {\n      console.log('componentDidUpdate',this.state.loading)\n      this.setState({jokes: this.state.jokes.slice()});\n    }    \n  }\n  async getJokes() {\n    let j = [];\n    let seenJokes = new Set();\n    try {\n      this.setState({loading: true});\n      while (j.length < this.numJokesToGet) {\n        let res = await axios.get(\"https://icanhazdadjoke.com\", {\n          headers: { Accept: \"application/json\" }\n        });\n        let { status, ...jokeObj } = res.data;\n        console.log(j.length, status, jokeObj)\n        if (!seenJokes.has(jokeObj.id)) {\n          seenJokes.add(jokeObj.id);\n          j.push({ ...jokeObj, votes: 0 });\n        } else {\n          console.error(\"duplicate found!\");\n        }\n      }\n      this.setState((state, props) => ({\n        jokes: [...this.state.jokes, j]\n      }));\n    } catch (e) {\n      console.log(e);\n    }\n  }\n  /* empty joke list and then call getJokes */\n\n  async generateNewJokes() {\n    this.setState({jokes: []});\n    await this.getJokes();\n    this.setState({loading: false});\n    console.log('generateNewJokes loading',this.state.loading)\n  }\n\n  /* change vote for this id by delta (+1 or -1) */\n\n  vote(id, delta) {\n    let {jokes} = this.state;\n    this.setState({jokes: [jokes[0].map(j => (j.id === id ? { ...j, votes: j.votes + delta} : j) )] });\n  }\n\n  /* render: either loading spinner or list of sorted jokes. */\n  render() {\n    if (!this.state.loading && this.state.jokes.length) {\n      let sortedJokes = [...this.state.jokes[0]].sort((a, b) => b.votes - a.votes);\n    \n      return (\n        <div className=\"JokeList\">\n          <button className=\"JokeList-getmore\" onClick={this.generateNewJokes()}>\n            Get New Jokes\n          </button>\n          {sortedJokes.map(j => (            \n            <JokeCLS text={j.joke} key={uuid()} id={j.id} votes={j.votes} vote={this.vote} />\n          ))}\n        </div>\n      );\n    } else {\n      return <CircularProgress />;\n    }\n    \n  }\n\n}\n\nexport default JokeListCLS;\n"]},"metadata":{},"sourceType":"module"}